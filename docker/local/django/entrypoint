#!/bin/bash

# Configuration des flags d'erreurs pour bash
set -o errexit
set -o pipefail
set -o nounset

# Tries to connect to the PostgreSQL database. Returns 0 if it
# succeeds and 255 (-1) if it does not.
postgres_ready() {
python << END_PYTHON
import sys
import os

import psycopg

try:
    if "postgres" in "${DB_CONNECTION:-}":
        psycopg.connect(
            dbname="${DB_NAME:-}",
            user="${DB_USER:-}",
            password="${DB_PASSWORD:-}",
            host="${DB_HOST:-}",
            port="${DB_PORT:-}",
        )
        print()
        print("✅ PostgreSQL is ready!")
        print()
    else:
        print()
        print("✅ Using default database sqllite")
        print()
except psycopg.OperationalError:
    sys.exit(-1)
sys.exit(0)
END_PYTHON
}

# Tries to connect to the Redis server using REDIS_URL. Returns 0 if it
# succeeds and 255 (-1) if it does not.
redis_ready() {
python << END_PYTHON
import sys
import os

import redis

try:
    r = redis.from_url("${REDIS_URL:-}")
    r.ping()
    print()
    print("✅ Redis is ready!")
    print()
except redis.exceptions.ConnectionError:
    sys.exit(-1)
sys.exit(0)
END_PYTHON
}

# We wait until the PostgreSQL database is ready and the postgres_ready function
# returns the value 0 (synonymous with success)
until postgres_ready; do
  >&2 echo '⏳ Waiting for PostgreSQL to become available...'
  sleep 1
done

# We wait until the Redis server is ready and the redis_ready function
# returns the value 0 (synonymous with success)
until redis_ready; do
  >&2 echo '⏳ Waiting for Redis to become available...'
  sleep 1
done


# Execution of the /start file received in parameter
exec "$@"
